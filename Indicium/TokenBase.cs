using System.Text.RegularExpressions;

namespace Indicium
{
    /// <summary>
    /// Abstract type that serves a base class for types generated by the code generator.
    /// </summary>
    public abstract class TokenBase
    {
        public abstract string Id { get; }

        public abstract Regex Regex { get; }

        public RegexOptions RegexOptions { get; set; } =
            RegexOptions.Compiled | RegexOptions.Multiline | RegexOptions.Singleline;

        public virtual bool GetLexeme<TTokenBase, TLexeme>(string input, ref int index, ref int matchLength, 
            out TLexeme lexeme, int lineNumber = 0)
            where TTokenBase: TokenBase
            where TLexeme: LexemeBase<TTokenBase>, new()
        {
            var match = Regex.Match(input, index);

            lexeme = default(TLexeme);

            if (!match.Success || match.Index != index) return false;
            if (match.Length == 0) return false;

            index += match.Length;
            matchLength = match.Length;

            lexeme = new TLexeme() {
                Value = match.Value,
                LineNumber = 0,
                LineIndex = index - matchLength
            };
            return true;
        }

        public virtual bool GetLexeme(string input, ref int index, ref int matchLength, 
            out LexemeBase<TokenBase> lexeme, int lineNumber = 0)
        {
            var match = Regex.Match(input, index);

            lexeme = default(LexemeBase<TokenBase>);

            if (!match.Success || match.Index != index) return false;
            if (match.Length == 0) return false;

            index += match.Length;
            matchLength = match.Length;

            lexeme = new LexemeBase<TokenBase>(this) {
                Value = match.Value,
                LineNumber = 0,
                LineIndex = index - matchLength
            };
            return true;
        }

        public override string ToString() => $"{Id} - {Regex}";

        public override int GetHashCode() => Id.GetHashCode() ^ Regex.GetHashCode();

        protected bool Equals(TokenBase other) => Id == other.Id && Regex == other.Regex;

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != this.GetType()) return false;
            return Equals((TokenBase) obj);
        }

        public static bool operator ==(TokenBase left, TokenBase right) => Equals(left, right);

        public static bool operator !=(TokenBase left, TokenBase right) => !Equals(left, right);
    }
}