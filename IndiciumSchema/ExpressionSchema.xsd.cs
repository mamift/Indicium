//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Indicium.Schemas {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    
    
    /// <summary>
    /// <para>
    /// Regular expression: (Token+, TokenGroup*)
    /// </para>
    /// </summary>
    public partial class TokenContext : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Token> TokenField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<TokenGroup> TokenGroupField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
         public static explicit operator TokenContext(XElement xe) { return XTypedServices.ToXTypedElement<TokenContext>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TokenContext() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XName.Get("Token", "https://github.com/mamift/Indicium")), new NamedContentModelEntity(XName.Get("TokenGroup", "https://github.com/mamift/Indicium")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Token+, TokenGroup*)
        /// </para>
        /// </summary>
        public TokenContext() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Token+, TokenGroup*)
        /// </para>
        /// </summary>
        public IList<Token> Token {
            get {
                if ((this.TokenField == null)) {
                    this.TokenField = new XTypedList<Token>(this, LinqToXsdTypeManager.Instance, XName.Get("Token", "https://github.com/mamift/Indicium"));
                }
                return this.TokenField;
            }
            set {
                if ((value == null)) {
                    this.TokenField = null;
                }
                else {
                    if ((this.TokenField == null)) {
                        this.TokenField = XTypedList<Token>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Token", "https://github.com/mamift/Indicium"));
                    }
                    else {
                        XTypedServices.SetList<Token>(this.TokenField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Token+, TokenGroup*)
        /// </para>
        /// </summary>
        public IList<TokenGroup> TokenGroup {
            get {
                if ((this.TokenGroupField == null)) {
                    this.TokenGroupField = new XTypedList<TokenGroup>(this, LinqToXsdTypeManager.Instance, XName.Get("TokenGroup", "https://github.com/mamift/Indicium"));
                }
                return this.TokenGroupField;
            }
            set {
                if ((value == null)) {
                    this.TokenGroupField = null;
                }
                else {
                    if ((this.TokenGroupField == null)) {
                        this.TokenGroupField = XTypedList<TokenGroup>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("TokenGroup", "https://github.com/mamift/Indicium"));
                    }
                    else {
                        XTypedServices.SetList<TokenGroup>(this.TokenGroupField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("TokenContext", "https://github.com/mamift/Indicium");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static TokenContext Load(string xmlFile) {
            return XTypedServices.Load<TokenContext>(xmlFile);
        }
        
        public static TokenContext Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<TokenContext>(xmlFile);
        }
        
        public static TokenContext Parse(string xml) {
            return XTypedServices.Parse<TokenContext>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TokenContext>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Token", "https://github.com/mamift/Indicium"), typeof(Token));
            localElementDictionary.Add(XName.Get("TokenGroup", "https://github.com/mamift/Indicium"), typeof(TokenGroup));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((Token*)?|TokenGroup1*)
    /// </para>
    /// </summary>
    public partial class TokenGroup : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Token> TokenField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<TokenGroup> TokenGroup1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator TokenGroup(XElement xe) { return XTypedServices.ToXTypedElement<TokenGroup>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TokenGroup() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((Token*)?|TokenGroup1*)
        /// </para>
        /// </summary>
        public TokenGroup() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Token*)?|TokenGroup1*)
        /// </para>
        /// </summary>
        public IList<Token> Token {
            get {
                if ((this.TokenField == null)) {
                    this.TokenField = new XTypedList<Token>(this, LinqToXsdTypeManager.Instance, XName.Get("Token", "https://github.com/mamift/Indicium"));
                }
                return this.TokenField;
            }
            set {
                if ((value == null)) {
                    this.TokenField = null;
                }
                else {
                    if ((this.TokenField == null)) {
                        this.TokenField = XTypedList<Token>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Token", "https://github.com/mamift/Indicium"));
                    }
                    else {
                        XTypedServices.SetList<Token>(this.TokenField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: ((Token*)?|TokenGroup1*)
        /// </para>
        /// </summary>
        public IList<TokenGroup> TokenGroup1 {
            get {
                if ((this.TokenGroup1Field == null)) {
                    this.TokenGroup1Field = new XTypedList<TokenGroup>(this, LinqToXsdTypeManager.Instance, XName.Get("TokenGroup", "https://github.com/mamift/Indicium"));
                }
                return this.TokenGroup1Field;
            }
            set {
                if ((value == null)) {
                    this.TokenGroup1Field = null;
                }
                else {
                    if ((this.TokenGroup1Field == null)) {
                        this.TokenGroup1Field = XTypedList<TokenGroup>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("TokenGroup", "https://github.com/mamift/Indicium"));
                    }
                    else {
                        XTypedServices.SetList<TokenGroup>(this.TokenGroup1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Refer to another already defined token definition. @Identifier and @Regex attributes will be ignored if they have values.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Ref {
            get {
                XAttribute x = this.Attribute(XName.Get("Ref", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Ref", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The unique identifier for this token definition.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Id {
            get {
                XAttribute x = this.Attribute(XName.Get("Id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("TokenGroup", "https://github.com/mamift/Indicium");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static TokenGroup Load(string xmlFile) {
            return XTypedServices.Load<TokenGroup>(xmlFile);
        }
        
        public static TokenGroup Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<TokenGroup>(xmlFile);
        }
        
        public static TokenGroup Parse(string xml) {
            return XTypedServices.Parse<TokenGroup>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TokenGroup>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Token", "https://github.com/mamift/Indicium"), typeof(Token));
            localElementDictionary.Add(XName.Get("TokenGroup", "https://github.com/mamift/Indicium"), typeof(TokenGroup));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((Token+)*)
    /// </para>
    /// </summary>
    public partial class Expression : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Token> TokenField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static Dictionary<XName, System.Type> localElementDictionary = new Dictionary<XName, System.Type>();
        
         public static explicit operator Expression(XElement xe) { return XTypedServices.ToXTypedElement<Expression>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Expression() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((Token+)*)
        /// </para>
        /// </summary>
        public Expression() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Token+)*)
        /// </para>
        /// </summary>
        public IList<Token> Token {
            get {
                if ((this.TokenField == null)) {
                    this.TokenField = new XTypedList<Token>(this, LinqToXsdTypeManager.Instance, XName.Get("Token", "https://github.com/mamift/Indicium"));
                }
                return this.TokenField;
            }
            set {
                if ((value == null)) {
                    this.TokenField = null;
                }
                else {
                    if ((this.TokenField == null)) {
                        this.TokenField = XTypedList<Token>.Initialize(this, LinqToXsdTypeManager.Instance, value, XName.Get("Token", "https://github.com/mamift/Indicium"));
                    }
                    else {
                        XTypedServices.SetList<Token>(this.TokenField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Expression", "https://github.com/mamift/Indicium");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Expression Load(string xmlFile) {
            return XTypedServices.Load<Expression>(xmlFile);
        }
        
        public static Expression Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Expression>(xmlFile);
        }
        
        public static Expression Parse(string xml) {
            return XTypedServices.Parse<Expression>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Expression>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XName.Get("Token", "https://github.com/mamift/Indicium"), typeof(Token));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class RegexString {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(32)), null, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Replace));
        
        private RegexString() {
        }
    }
    
    public partial class TToken : XTypedElement, IXMetaData {
        
         public static explicit operator TToken(XElement xe) { return XTypedServices.ToXTypedElement<TToken>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public TToken() {
        }
        
        public string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Refer to another already defined token definition. @Identifier and @Regex attributes will be ignored if they have values.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Ref {
            get {
                XAttribute x = this.Attribute(XName.Get("Ref", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Ref", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The unique identifier for this token definition.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Id {
            get {
                XAttribute x = this.Attribute(XName.Get("Id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(XName.Get("Id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("TToken", "https://github.com/mamift/Indicium");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TToken>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class Token : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private TToken ContentField;
        
         public static explicit operator Token(XElement xe) { return XTypedServices.ToXTypedElement<Token, TToken>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public Token() {
            SetInnerType(new TToken());
        }
        
        public Token(TToken content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public TToken Content {
            get {
                return ContentField;
            }
        }
        
        public string TypedValue {
            get {
                return this.ContentField.TypedValue;
            }
            set {
                this.ContentField.TypedValue = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Refer to another already defined token definition. @Identifier and @Regex attributes will be ignored if they have values.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string @Ref {
            get {
                return this.ContentField.@Ref;
            }
            set {
                this.ContentField.@Ref = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// The unique identifier for this token definition.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public string Id {
            get {
                return this.ContentField.Id;
            }
            set {
                this.ContentField.Id = value;
            }
        }
        
        Dictionary<XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        XName IXMetaData.SchemaName {
            get {
                return XName.Get("Token", "https://github.com/mamift/Indicium");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Token Load(string xmlFile) {
            return XTypedServices.Load<Token, TToken>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Token Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Token, TToken>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Token Parse(string xml) {
            return XTypedServices.Parse<Token, TToken>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Token(((TToken)(this.Content.Clone())));
        }
        
        private void SetInnerType(TToken ContentField) {
            this.ContentField = ((TToken)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public class LinqToXsdTypeManager : ILinqToXsdTypeManager {
        
        static Dictionary<XName, System.Type> typeDictionary = new Dictionary<XName, System.Type>();
        
        static Dictionary<XName, System.Type> elementDictionary = new Dictionary<XName, System.Type>();
        
        static Dictionary<System.Type, System.Type> wrapperDictionary = new Dictionary<System.Type, System.Type>();
        
        private static XmlSchemaSet schemaSet;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();
        
        static LinqToXsdTypeManager() {
            BuildTypeDictionary();
            BuildElementDictionary();
            BuildWrapperDictionary();
        }
        
        XmlSchemaSet ILinqToXsdTypeManager.Schemas {
            get {
                if ((schemaSet == null)) {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set {
                schemaSet = value;
            }
        }
        
        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary {
            get {
                return typeDictionary;
            }
        }
        
        Dictionary<XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary {
            get {
                return elementDictionary;
            }
        }
        
        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping {
            get {
                return wrapperDictionary;
            }
        }
        
        public static LinqToXsdTypeManager Instance {
            get {
                return typeManagerSingleton;
            }
        }
        
        private static void BuildTypeDictionary() {
            typeDictionary.Add(XName.Get("TToken", "https://github.com/mamift/Indicium"), typeof(global::Indicium.Schemas.TToken));
        }
        
        private static void BuildElementDictionary() {
            elementDictionary.Add(XName.Get("TokenContext", "https://github.com/mamift/Indicium"), typeof(global::Indicium.Schemas.TokenContext));
            elementDictionary.Add(XName.Get("TokenGroup", "https://github.com/mamift/Indicium"), typeof(global::Indicium.Schemas.TokenGroup));
            elementDictionary.Add(XName.Get("Expression", "https://github.com/mamift/Indicium"), typeof(global::Indicium.Schemas.Expression));
            elementDictionary.Add(XName.Get("Token", "https://github.com/mamift/Indicium"), typeof(global::Indicium.Schemas.Token));
        }
        
        private static void BuildWrapperDictionary() {
            wrapperDictionary.Add(typeof(Indicium.Schemas.Token), typeof(global::Indicium.Schemas.TToken));
        }
        
        protected internal static void AddSchemas(XmlSchemaSet schemas) {
            schemas.Add(schemaSet);
        }
        
        public static System.Type GetRootType() {
            return elementDictionary[XName.Get("TokenContext", "https://github.com/mamift/Indicium")];
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

    public TokenContext TokenContext {  get {return rootObject as TokenContext; } }

    public TokenGroup TokenGroup {  get {return rootObject as TokenGroup; } }

    public Expression Expression {  get {return rootObject as Expression; } }

    public Token Token {  get {return rootObject as Token; } }
        
        private XRootNamespace() {
        }
        
        public XRootNamespace(TokenContext root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(TokenGroup root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Expression root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Token root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
    
    public partial class XRoot {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

    public global::Indicium.Schemas.TokenContext TokenContext {  get {return rootObject as global::Indicium.Schemas.TokenContext; } }

    public global::Indicium.Schemas.TokenGroup TokenGroup {  get {return rootObject as global::Indicium.Schemas.TokenGroup; } }

    public global::Indicium.Schemas.Expression Expression {  get {return rootObject as global::Indicium.Schemas.Expression; } }

    public global::Indicium.Schemas.Token Token {  get {return rootObject as global::Indicium.Schemas.Token; } }
        
        private XRoot() {
        }
        
        public XRoot(global::Indicium.Schemas.TokenContext root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Indicium.Schemas.TokenGroup root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Indicium.Schemas.Expression root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Indicium.Schemas.Token root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public static XRoot Load(string xmlFile) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(string xmlFile, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(XmlReader xmlReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
}
